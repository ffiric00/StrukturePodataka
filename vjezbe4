#define _CRT_SECURE_NO_WARNINGS

#include<stdio.h> 
#include<stdlib.h> 
#include<string.h> 

#define MAX_LINE_SIZE 256 

struct polynom;
typedef struct polynom* Position;
typedef struct polynom {
	int coefficient;
	int exponent;
	Position next;
}Polynom;

int scanFromFile(const char*, Position);
int counter(const char*);
int sortedInput(Position, int, int);
Position add(Position, Position);
Position multiply(Position, Position); 
int printPolynom(Position);

int main(void) {
	Position polynom1, polynom2, sum, mltply;
	polynom1 = (Position)malloc(sizeof(struct polynom));
	polynom2 = (Position)malloc(sizeof(struct polynom));
	polynom1->next = NULL;
	polynom2->next = NULL;
	scanFromFile("polinom1.txt", polynom1);
	scanFromFile("polinom2.txt", polynom2);
	sum = add(polynom1, polynom2);
	mltply = multiply(polynom1, polynom2); 
	printPolynom(sum->next); 
	printf("\n"); 
	printPolynom(mltply->next); 
	system("pause");
	return 0;
}

int scanFromFile(const char* fileName, Position polynom) {
	FILE *fp;
	fp = fopen(fileName, "r");
	for (int i = 0; i < counter(fileName); i++) {
		fscanf(fp, "%d %d", &polynom->coefficient, &polynom->exponent);
		sortedInput(polynom, polynom->coefficient, polynom->exponent);
	}
	fclose(fp);
	return 0;
}

int counter(const char* fileName) {
	int counter = 1;
	char buffer;
	FILE *fp;
	fp = fopen(fileName, "r");
	while (buffer = fgetc(fp) != EOF) {
		if (buffer == ' ')
			counter++;
	}
	fclose(fp);
	return (counter / 2);
}

int sortedInput(Position polynom, int coefficient, int exponent) {
	Position newMember;
	newMember = (Position)malloc(sizeof(struct polynom));
	newMember->coefficient = coefficient;
	newMember->exponent = exponent;
	while (polynom->next != NULL && polynom->next->exponent < newMember->exponent)
		polynom = polynom->next;
	newMember->next = polynom->next;
	polynom->next = newMember;
	return 0;
}

Position add(Position polynom1, Position polynom2) {
	Position add;
	add = (Position)malloc(sizeof(struct polynom));
	add->next = NULL;
	while (polynom1 != NULL || polynom2 != NULL) {
		if (polynom1->exponent == polynom2->exponent) {
			sortedInput(add, polynom1->exponent, (polynom1->coefficient + polynom2->coefficient));
			polynom1 = polynom1->next;
			polynom2 = polynom2->next;
		}
		if (polynom1->exponent > polynom2->exponent)
			polynom1 = polynom1->next;
		if (polynom2->exponent > polynom1->exponent)
			polynom2 = polynom2->next;
	}
	if (polynom1 == NULL) {
		while (polynom2 != NULL) {
			sortedInput(add, polynom2->exponent, polynom2->coefficient);
			polynom2 = polynom2->next;
		}
	}
	if (polynom2 == NULL) {
		while (polynom1 != NULL) {
			sortedInput(add, polynom1->exponent, polynom1->coefficient);
			polynom1 = polynom1->next;
		}
	}
	return add;
}

Position multiply(Position polynom1, Position polynom2) {
	Position i = NULL, j = NULL, result = NULL;
	for (i = polynom1->next; i != NULL; i = i->next)
		for (j = polynom2->next; j != NULL; j = j->next)
			sortedInput(result, i->coefficient * j->coefficient, i->exponent + j->exponent);
	return result;
} 

int printPolynom(Position polynom) {
	while (polynom != NULL) {
		printf("%d %d\t", polynom->coefficient, polynom->exponent); 
		polynom = polynom->next;
	} 
	return 0;
}
