#define _CRT_SECURE_NO_WARNINGS

#include<stdio.h> 
#include<stdlib.h> 

typedef struct node* Position; 
typedef struct node {
	int element; 
	Position next;
}Node; 

int Scan(Position); 
int sortedScan(Position); 
int insertAtBeginning(int, Position); 
Position createNode(int); 
Position conjunction(Position, Position);  
Position disjunction(Position, Position);
int printList(Position);

int main(void) {
	Position list1, list2, list3, list4; 
	list1 = (Position)malloc(sizeof(struct node)); 
	list2 = (Position)malloc(sizeof(struct node)); 
	list1->next = NULL; 
	list2->next = NULL;
	Scan(list1); 
	Scan(list2);  
	list3 = conjunction(list1, list2); 
	list4 = disjunction(list1, list2);
	printList(list3->next); 
	printList(list4->next);
	system("pause"); 
	return 0;
} 

int Scan(Position head) {
	int i, j;
	printf("\nKoliko elemenata zelis unijeti?"); 
	scanf("%d", &i); 
	for (j = 0; j < i; j++)
		sortedScan(head); 
	return 0;
} 

int sortedScan(Position head) {
	int num; 
	printf("\nUnesi element"); 
	scanf("%d", &num); 
	while (head->next != NULL && (num > head->next->element) )
		head = head->next; 
	insertAtBeginning(num, head); 
	return 0;
} 

int insertAtBeginning(int num, Position head) {
	Position node = createNode(num); 
	node->next = head->next; 
	head->next = node; 
	return 0;
} 
Position createNode(int num) { 
	Position node; 
	node = (Position)malloc(sizeof(struct node)); 
	node->element = num; 
	node->next = NULL; 
	return node;
}

Position conjunction(Position list1, Position list2) { 
	Position list3; 
	list3 = (Position)malloc(sizeof(struct node)); 
	list3->next = NULL; 
	while ( (list1 != NULL) && (list2 != NULL) ) {
		if ( (list1->element == list2->element)) {
			insertAtBeginning(list1->element, list3);
			list1 = list1->next;
			list2 = list2->next;
		}
		else if (list1->element > list2->element)
			list2 = list2->next; 
		else 
			list1 = list1->next;
	}  
	return list3;	
}  

int printList(Position head) { 
	while (head != NULL) {
		printf("\n%d", head->element); 
		head = head->next;
	} 
	return 0;
} 

Position disjunction(Position list1, Position list2) { 
	Position list3;
	list3 = (Position)malloc(sizeof(struct node));
	list3->next = NULL;  
	while ((list1 != NULL) && (list2 != NULL)) {
		if ((list1->element == list2->element)) {
			insertAtBeginning(list1->element, list3);
			list1 = list1->next;
			list2 = list2->next;
		}
		else if (list1->element > list2->element) {
			insertAtBeginning(list2->element, list3);
			list2 = list2->next;
		}
		else {
			insertAtBeginning(list1->element, list3);
			list1 = list1->next;
		}
	}
	if (list1 == NULL) {
		while (list2 != NULL) {
			insertAtBeginning(list2->element, list3);
			list2 = list2->next;
		}
	} 
	if (list2 == NULL) 
		while (list1 != NULL) {
			insertAtBeginning(list1->element, list3);
			list1 = list1->next;
		}
	return list3;
}
